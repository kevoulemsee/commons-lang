org.apache.commons.lang3.reflect.TypeUtils#unrollVariables(Ljava/util/Map;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;
false
446373e88b580bf5d42a38ec38814a1a
java.util.Collections#emptyMap()Ljava/util/Map;
java.util.HashMap#<init>(Ljava/util/Map;)V
java.util.HashMap#instance-init#
org.apache.commons.lang3.reflect.TypeUtils#containsTypeVariables(Ljava/lang/reflect/Type;)Z
org.apache.commons.lang3.reflect.TypeUtils#getTypeArguments(Ljava/lang/reflect/ParameterizedType;)Ljava/util/Map;
org.apache.commons.lang3.reflect.TypeUtils#parameterizeWithOwner(Ljava/lang/reflect/Type;Ljava/lang/Class;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;
org.apache.commons.lang3.reflect.TypeUtils#unrollBounds(Ljava/util/Map;[Ljava/lang/reflect/Type;)[Ljava/lang/reflect/Type;
org.apache.commons.lang3.reflect.TypeUtils#unrollVariables(Ljava/util/Map;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;
org.apache.commons.lang3.reflect.TypeUtils#wildcardType()Lorg/apache/commons/lang3/reflect/TypeUtils$WildcardTypeBuilder;
==
build org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder#build()Ljava/lang/reflect/WildcardType;
get java.util.Map#get(Ljava/lang/Object;)Ljava/lang/Object;
getActualTypeArguments java.lang.reflect.ParameterizedType#getActualTypeArguments()[Ljava/lang/reflect/Type;
getLowerBounds java.lang.reflect.WildcardType#getLowerBounds()[Ljava/lang/reflect/Type;
getOwnerType java.lang.reflect.ParameterizedType#getOwnerType()Ljava/lang/reflect/Type;
getRawType java.lang.reflect.ParameterizedType#getRawType()Ljava/lang/reflect/Type;
getUpperBounds java.lang.reflect.WildcardType#getUpperBounds()[Ljava/lang/reflect/Type;
putAll java.util.Map#putAll(Ljava/util/Map;)V
withLowerBounds org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder#withLowerBounds([Ljava/lang/reflect/Type;)Lorg/apache/commons/lang3/reflect/TypeUtils$WildcardTypeBuilder;
withUpperBounds org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder#withUpperBounds([Ljava/lang/reflect/Type;)Lorg/apache/commons/lang3/reflect/TypeUtils$WildcardTypeBuilder;